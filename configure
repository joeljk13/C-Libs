#!/bin/sh

# Parameters

CC=gcc
CFLAGS=
DEBUG=true
# Optimization is only relevant when not in debug mode; see DEBUGPARAMS below
# for the actual optimization setting then
OPTIMIZATION="-O3 -flto -Wl,-O1"
WARNINGS="-Wall -Wextra -Wundef -Wshadow -Wcast-align -Wjump-misses-init \
    -Wstrict-prototypes -Wstrict-overflow=4 -Wwrite-strings \
    -Waggregate-return -Wcast-qual -Wswitch-default -Wstrict-aliasing \
    -Wconversion -Wunreachable-code -Wformat=2 -Winit-self -Wuninitialized \
    -Wmissing-prototypes -Wold-style-definition -Wdouble-promotion \
    -Wsuggest-attribute=noreturn -Wsuggest-attribute=format \
    -Wdeclaration-after-statement -Wunsafe-loop-optimizations \
    -Wmissing-declarations -Wmissing-field-initializers -Wredundant-decls \
    -Winline -Wvla -Wdisabled-optimization -Wstack-protector \
    -Wvector-operation-performance"

ERRS="-pedantic-errors -Werror -Wno-error=cast-align -Wno-error=cast-qual"

DEFS=
TESTDEFS=" \
    TESTING=1 \
    COLOR_RED='\"$(tput setaf 1)\"' \
    COLOR_GREEN='\"$(tput setaf 2)\"' \
    COLOR_YELLOW='\"$(tput setaf 3)\"' \
    COLOR_RESET='\"$(tput sgr 0)\"'"

EXEC=test
LINKS=asan
SRCDIR=src
TESTDIR=tests
MAKEFILE=Makefile
EXT=c
CPARAMS="-std=c99 -Wl,-build-id=sha1 $WARNINGS $ERRS"
DEBUGPARAMS="-ggdb3 -O0 -Wl,-O0 -Wno-error=unreachable-code -ftrapv \
    -fstack-check -fstack-protector-all -fverbose-asm -fbounds-check \
    -fsanitize=address -fmessage-length=72"
# These could be useful but don't currently work (gcc 4.8.3):
# -fdiagnostics-color=auto
# -fsanitize=thread
# -fsanitize=undefined
# -fsanitize=float-divide-by-zero
MAINFILE=main

# Programmatically generated parameters

SRCS="$(find -wholename "./$SRCDIR/*.$EXT" | tr "\n" " ")"
TESTS="$(find -wholename "./$TESTDIR/*.$EXT" | tr "\n" " ")"

SRCS_NOMAIN="$(printf "%s\n" "$SRCS" | sed \
    "s/[^ ]*$SRCDIR\/${MAINFILE}.$EXT//")"

if $DEBUG
then
    CPARAMS="$CPARAMS -DDEBUG $DEBUGPARAMS"
    LPARAMS="$LPARAMS $DEBUGPARAMS"
else
    CPARAMS="$CPARAMS $OPTIMIZATION -DNDEBUG"
fi

for DEF in $DEFS
do
    CPARAMS="$CPARAMS -D$DEF"
done

CPARAMS="$CPARAMS $CFLAGS"

LPARAMS=
LLINKS=
if ! $DEBUG
then
    LPARAMS="$LPARAMS $OPTIMIZATION"
fi

for LINK in $LINKS
do
    LLINKS="$LLINKS -l$LINK"
done

TPARAMS="$CPARAMS"
for TESTDEF in $TESTDEFS
do
    TPARAMS="$TPARAMS -D$TESTDEF"
done

# Actually create the make file

printf "
SHELL = /bin/sh
SRCS = %s
SRCS_NOMAIN = %s
SRCOBJS = \$(SRCS:.%s=.o)
SRCOBJS_NOMAIN = \$(SRCS_NOMAIN:.%s=.o)
TESTS = %s
TESTOBJS = \$(TESTS:.%s=.o)
CPARAMS = %s
LPARAMS = %s
LINKS = %s
TPARAMS = %s

%s: \$(SRCOBJS)
\t%s -o \$@ \$(LPARAMS) \$^ \$(LINKS)
" "$SRCS" "$SRCS_NOMAIN" "$EXT" "$EXT" "$TESTS" "$EXT" "$CPARAMS" "$LPARAMS" \
    "$LLINKS" "$TPARAMS" "$EXEC" "$CC" > "$MAKEFILE"

for SRC in $SRCS
do
    printf "%s/%s\n\t%s -c -o \$@ \$(CPARAMS) \$<\n" \
        "$SRCDIR" "$($CC -MM "$SRC")" "$CC" >> "$MAKEFILE"
done

printf "
.PHONY: check
check: \$(TESTOBJS) ;
" >> "$MAKEFILE"

for TEST in $TESTS
do
    printf "%s/%s\n\t@%s -c -o \$@ \$(TPARAMS) \$< \
        \n\t%s -o check \$(LPARAMS) \$@ \$(SRCOBJS_NOMAIN) \$(LINKS) \
        \n\t@if ! ./check; then echo; tput setaf 1; echo 'Check failed!'; \
            tput sgr 0; exit 1; fi \
        \n\t@echo \
        \n\t@tput setaf 2 \
        \n\t@echo 'Check succeeded!' \
        \n\t@echo \
        \n\t@tput sgr 0 \
        \n\t@rm -f check \$@\n\n" \
        "$TESTDIR" "$($CC -MM "$TEST")" "$CC" "$CC" >> "$MAKEFILE"
done

printf "\n
.PHONY: clean
clean:
\tfind -name '*.[ios]' -exec rm '{}' +
\trm -f check '%s'
" "$EXEC" >> "$MAKEFILE"
